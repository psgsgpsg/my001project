// SVSGigECard.cpp	: Interface of the SVSGigECard class
//
// Copyright (c) 2006 PACS Group  Zibo Creative Computor CO.,LTD
//////////////////////////////////////////////////////////////////////////
//
// Module :SVSGigECard
// Create Date	: 2007.11.12
//
// A simple tool for svsgige Image card. 

#include "SVSGigECard.h"
#include "Ttimediff.h"


SVSGigECard::SVSGigECard()
: RegisteredFunc(NULL),
  m_hCamera (SVGigE_NO_CAMERA),
  m_hChannel(SVGigE_NO_STREAMING_CHANNEL),
  m_hClient(SVGigE_NO_CLIENT)
{
	m_opened = false;
	m_living = false;
}

SVSGigECard::~SVSGigECard()
{
	Close();
}

bool	SVSGigECard::Open( )
{
	if (m_cameraName.size() == 0)
	{
		return false;
	}
	else	return Open(m_cameraName.c_str());
}

bool SVSGigECard::Open(const char * camTag)
{
	if(m_opened)	return m_opened;

	if (SVGigE_NO_CLIENT == m_hClient)
	{		
		m_hClient = CameraContainer_create(SVGigETL_TypeFilter);
		if (SVGigE_NO_CLIENT == m_hClient)
		{
			return false;
		}
	}

	if( SVGigE_SUCCESS != CameraContainer_discovery(m_hClient) )
	{	return false;	}

	int cameraCount = CameraContainer_getNumberOfCameras(m_hClient);
	if( 0 ==  cameraCount)
	{	return false;	}
	
	int index = 0;
	for (; index<cameraCount; index++)
	{
		Camera_handle hCamera = CameraContainer_getCamera(m_hClient, index);
		char * userdefineName = Camera_getUserDefinedName(hCamera);
		if (!strcmp(userdefineName, camTag))
		{
			m_hCamera = hCamera;
			break;
		}
	}

	if (index == cameraCount)
	{
		return false;
	}
	if( SVGigE_SUCCESS != Camera_openConnection(m_hCamera, 10) )
	{
		return	false;
	}
	SVGigE_RETURN err = StreamingChannel_create (&m_hChannel,  
		m_hClient,       
		m_hCamera,        
		10,				 
		&ImageCallback,    
		this) ;           
	if( err != SVGigE_SUCCESS)        
	{
		return false;
	}
	
	if (SVGigE_SUCCESS != Camera_setAcquisitionMode(m_hCamera, ACQUISITION_MODE_EXT_TRIGGER_INT_EXPOSURE))
	{
		return false;
	}

	RefreshData();
	SetCameraName(camTag);
	m_opened = true;

	return m_opened;
}

bool SVSGigECard::Close()
{
	if(m_opened)
	{
		StopLive();								
		m_opened = false;
	}
	if (SVGigE_SUCCESS != Camera_setAcquisitionControl(m_hCamera, ACQUISITION_CONTROL_STOP))
	{
		return false;
	}
	if (SVGigE_SUCCESS != Camera_setAcquisitionMode(m_hCamera, ACQUISITION_MODE_NO_ACQUISITION))
	{
		return false;
	}
	Sleep(100);
	if (SVGigE_SUCCESS != StreamingChannel_delete(m_hChannel))
	{
		return false;
	}
	m_hChannel = SVGigE_NO_STREAMING_CHANNEL;


	if (SVGigE_SUCCESS != Camera_closeConnection(m_hCamera))
	{
		return false;
	}
	if (SVGigE_SUCCESS != CameraContainer_delete(m_hClient))
	{
		return false;
	}
	m_hClient = SVGigE_NO_CLIENT;
	return !m_opened;
}

bool SVSGigECard::SetFrameRate(float  fps)
{
	if(!m_opened)	return false;
	else
	{
		if (SVGigE_SUCCESS != Camera_setFrameRate(m_hCamera, fps))
		{
			return false;
		}
		else return true;
	}
}

bool SVSGigECard::GetFrameRate(float  &fps)
{
	if (!m_opened) return false;
	else
	{
		if (SVGigE_SUCCESS != Camera_getFrameRate(m_hCamera, &fps))
		{
			return false;
		}
		else return true;
	}
}

bool SVSGigECard::StartLive()
{
	if (m_living)
	{
		return true;
	}		
	
	if (m_hChannel == SVGigE_NO_STREAMING_CHANNEL)
	{
		RegisteredFunc = m_regFuncStore;
		
	}
	else
	{
		RegisteredFunc = m_regFuncStore; 
	}	
	
	if (SVGigE_SUCCESS != Camera_setAcquisitionControl(m_hCamera, ACQUISITION_CONTROL_START))
	{
		return false;
	}

	m_living = true;
	return m_living;
}

bool SVSGigECard::StopLive()
{
	if (!m_living)
	{
		return true;
	}	
	
	if (SVGigE_SUCCESS != Camera_setAcquisitionControl(m_hCamera, ACQUISITION_CONTROL_STOP))
	{
		return false;
	}
	
	RegisteredFunc = NULL;

	m_living = false;	
	return !m_living;
}

TAlloc<TImageCard::PixelMem> SVSGigECard::GetPixelMem()
{
//	if(R64_OK != R64SignalNextWait(m_hBoard,&m_signal,m_grabTimeout)) // wait for frame done signal or 500 msec,  whichever comes first
	{
		return m_pixelMem.NullObject();
	}

	return m_pixelMem;
}

bool	SVSGigECard::SetROI(	size_t startX,
						   size_t startY,
						   size_t width,
						   size_t height)
{
	if (SVGigE_SUCCESS != Camera_setAreaOfInterest(m_hCamera,width, height, startX, startY)	)
	{
		return false;
	}
	else	return true;
}
bool	SVSGigECard::SetExpTime	(	const size_t	expTime)
{
	if (SVGigE_SUCCESS != Camera_setExposureTime(m_hCamera,  static_cast<float>(expTime)))
	{
		return false;
	}
	else	return true;
}

bool	SVSGigECard::SetGain		(	const size_t	gain)
{
	if (SVGigE_SUCCESS != Camera_setGain(m_hCamera, static_cast<float>(gain)))
	{
		return false;
	}
	else	return true;
}

bool	SVSGigECard::SetWhiteBal	(	const size_t	redVal,
					 const size_t	greenVal,
							const size_t	blueVal)
{
	if (SVGigE_SUCCESS != Camera_setWhiteBalance(m_hCamera, static_cast<float>(redVal), static_cast<float>(greenVal),static_cast<float>(blueVal)))
	{
		return false;
	}
	else return true;
}

bool	SVSGigECard::GetExpTime	(	size_t	&expTime)
{
	float exposurTime = 0.0;
	Camera_getExposureTime(m_hCamera, &exposurTime);
	expTime = static_cast<size_t>(exposurTime);
	return true;
}

bool	SVSGigECard::GetWhiteBal	(	size_t	&redVal,
					 size_t	&greenVal,
						size_t	&blueVal)
{
	float red = 0.0;
	float green = 0.0;
	float blue = 0.0;
	Camera_getWhiteBalance(m_hCamera, &red, &green, &blue);
	redVal = static_cast<size_t>(red);
	greenVal = static_cast<size_t>(green);
	blueVal = static_cast<size_t>(blue);
	return true;
}

bool	SVSGigECard::GetGain		(	size_t	&gain)
{
	float gainVal = 0.0;
	Camera_getGain(m_hCamera, &gainVal);
	gain = static_cast<size_t>(gainVal);
	return true;
}

bool	SVSGigECard::GetROI		(	size_t	&startX,
					 size_t	&startY,
					 size_t	&width,
						size_t	&height)
{
	int sizeX = 0;
	int sizeY = 0;
	int Xoffset = 0;
	int Yoffset = 0;
	Camera_getAreaOfInterest(m_hCamera, &sizeX, &sizeY, &Xoffset, &Yoffset);
	startX = static_cast<size_t>(Xoffset);
	startY = static_cast<size_t>(Yoffset);
	width = static_cast<size_t>(sizeX);
	height = static_cast<size_t>(sizeY);
	return true;
}

void*	SVSGigECard::GetPixelMemBase	() const
{
	if (m_pixelMemBase)
	{
		return m_pixelMemBase;
	}
	else	return NULL;
}

SVGigE_RETURN __stdcall SVSGigECard::ImageCallback(Image_handle Image, void* Context)
{	
	static TTimeDiff td;

	unsigned char *Data = Image_getDataPointer(Image);
	SVSGigECard	*pCard = (SVSGigECard*)Context;
	pCard->m_stampInterval = td.msec();
	td.Reset();
	
	pCard->m_pixelMemBase = Data;
	
	if(pCard->RegisteredFunc)	{	pCard->RegisteredFunc(pCard->m_regFuncParam);	}
	
	return SVGigE_SUCCESS;      
}

bool   SVSGigECard::RegisterProcFunc		(REGCallbackFunc* func, void *param)
{
	m_regFuncStore = func;
	m_regFuncParam = param;
	return true;
}

bool SVSGigECard::SaveSetting()
{
	if (SVGigE_SUCCESS != Camera_writeEEPROM(m_hCamera))
	{
		return false;
	}
	else return true;	
}

void SVSGigECard::SetCameraName(const char * camTag)
{
	if (camTag == NULL)
	{
		return;
	}
	m_cameraName = camTag;
}

size_t SVSGigECard::FrameInterval( )
{
	return size_t(m_stampInterval);
}

bool SVSGigECard::RefreshData()
{
	if( !Camera_isCameraFeature(m_hCamera, CAMERA_FEATURE_AOI) )
	{
		Camera_getImagerWidth(m_hCamera,	reinterpret_cast<int*>(&m_roi.width));
		Camera_getImagerHeight(m_hCamera,	reinterpret_cast<int*>(&m_roi.height));
	}
	else
	{
		Camera_getSizeX(m_hCamera, reinterpret_cast<int*>(&m_roi.width));
		Camera_getSizeY(m_hCamera, reinterpret_cast<int*>(&m_roi.height));
	}
	if (SVGigE_SUCCESS != Camera_getPitch(m_hCamera, reinterpret_cast<int*>(&m_roi.bytesPerRow)))
	{
		return false;
	}
	m_roi.bytesPerPixel	= 1;
	m_roi.bitsPerPixel	= 8;
	return true;
}