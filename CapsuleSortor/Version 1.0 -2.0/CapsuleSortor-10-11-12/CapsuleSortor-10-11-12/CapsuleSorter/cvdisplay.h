#if !defined(AFX_CVDISPLAY_H__DF5A5412_B84B_4682_94C8_452E308D6A07__INCLUDED_)
#define AFX_CVDISPLAY_H__DF5A5412_B84B_4682_94C8_452E308D6A07__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CCVdisplay wrapper class

class CCVdisplay : public CWnd
{
protected:
	DECLARE_DYNCREATE(CCVdisplay)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x289a0006, 0x32dd, 0x11d3, { 0x98, 0xf3, 0x0, 0x60, 0x8, 0x2c, 0x35, 0xe6 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	long GetImage();
	void SetImage(long);
	double GetDisplayGain();
	void SetDisplayGain(double);
	long GetDisplayOffset();
	void SetDisplayOffset(long);
	long GetLeftButtonMode();
	void SetLeftButtonMode(long);
	BOOL GetStatusImageSize();
	void SetStatusImageSize(BOOL);
	BOOL GetStatusEmpty();
	void SetStatusEmpty(BOOL);
	BOOL GetStatusScale();
	void SetStatusScale(BOOL);
	BOOL GetStatusCurrentPos();
	void SetStatusCurrentPos(BOOL);
	BOOL GetStatusGrayValue();
	void SetStatusGrayValue(BOOL);
	BOOL GetScrollBars();
	void SetScrollBars(BOOL);
	BOOL GetShowCoords();
	void SetShowCoords(BOOL);
	BOOL GetDrawErase();
	void SetDrawErase(BOOL);
	long GetGreenPage();
	void SetGreenPage(long);
	long GetRedPage();
	void SetRedPage(long);
	long GetBluePage();
	void SetBluePage(long);
	BOOL GetBevelInner();
	void SetBevelInner(BOOL);
	BOOL GetBevelOuter();
	void SetBevelOuter(BOOL);
	long GetCoordStyle();
	void SetCoordStyle(long);
	short GetAppearance();
	void SetAppearance(short);
	short GetBorderStyle();
	void SetBorderStyle(short);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	CString GetStatusUserText();
	void SetStatusUserText(LPCTSTR);
	BOOL GetRulerEnabled();
	void SetRulerEnabled(BOOL);
	BOOL GetDirectDrawEnabled();
	void SetDirectDrawEnabled(BOOL);
	long GetAOOCount();
	CString GetAOOName();
	long GetAOOType();
	long GetAOONumVertices();
	long GetAOONumVerticesUsed();
	long GetAOOIndex();
	void SetAOOIndex(long);
	long GetRightButtonMode();
	void SetRightButtonMode(long);
	BOOL GetManualDisplayRefresh();
	void SetManualDisplayRefresh(BOOL);
	BOOL GetOverlayDragAndDelete();
	void SetOverlayDragAndDelete(BOOL);
	BOOL GetSyncRefreshToMonitor();
	void SetSyncRefreshToMonitor(BOOL);
	long GetMouseWheelMode();
	void SetMouseWheelMode(long);
	long GetDisplayRectPercentage();
	void SetDisplayRectPercentage(long);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);

// Operations
public:
	BOOL SaveImageByDialog();
	BOOL SaveImage(LPCTSTR Filename);
	BOOL CopyImageToClipboard();
	BOOL GetSelectedArea(double* x0, double* y0, double* x1, double* y1, double* x2, double* y2);
	BOOL SetSelectedArea(double x0, double y0, double x1, double y1, double x2, double y2);
	BOOL RemoveLabel(long ID);
	BOOL RemoveAllLabels();
	BOOL SubAreaSelected();
	BOOL MakeOverlayImage();
	BOOL HighLightLabel(long ID, BOOL Highlight);
	BOOL GetLabelPosition(long ID, long* x, long* y);
	BOOL AddLabel(LPCTSTR Text, BOOL CanDrag, long Color, long ID, long x, long y);
	void Refresh();
	BOOL RemoveUserObject(long ID);
	BOOL RemoveAllUserObjects();
	BOOL GetUserObjectPosition(long ID, long Index, long* x, long* y);
	BOOL ImageToClient(long ImageX, long ImageY, long* ClientX, long* ClientY);
	BOOL ClientToImage(long ClientX, long ClientY, long* ImageX, long* ImageY);
	BOOL AddUserObject(LPCTSTR Text, BOOL CanDrag, BOOL XorOnly, long NumVertices, long ID, long Vertices);
	BOOL RemoveOverlayObject(long ID);
	BOOL RemoveAllOverlayObjects();
	BOOL GetOverlayObjectPosition(long ID, long Index, long* x, long* y);
	BOOL HighLightOverlayObject(long ID, BOOL Highlight);
	BOOL MoveOverlayObject(long ID, long x, long y, BOOL MoveAbsolute);
	BOOL IsOverlayObjectAvailable(LPCTSTR ObjectName, long* ObjectType, long* NumVertices, long* NumVerticesUsed);
	BOOL AddOverlayObject(LPCTSTR ObjectName, LPCTSTR Text, BOOL CanDrag, BOOL XorOnly, long Color, long HighLightColor, BOOL Filled, long ID, long* Vertices, long* ObjectData);
	BOOL GetDisplayZoom(long* CenterX, long* CenterY, long* ZoomFactor);
	BOOL SetDisplayZoom(long CenterX, long CenterY, long ZoomFactor);
	void Lock();
	void Unlock();
	BOOL RemoveAllOverlays();
	BOOL SaveWindowToBitmap(long hWnd, LPCTSTR Filename);
	BOOL HasLabel(long ID);
	BOOL HasOverlayObject(long ID);
	BOOL HasUserObject(long ID);
	// method 'AddOverlayObjectNET' not emitted because of invalid return type or parameter type
	BOOL AddUserObjectNET(LPCTSTR Text, BOOL CanDrag, BOOL XorOnly, long ID, long PixelList);
	BOOL SetDisplayZoomEx(long CenterX, long CenterY, double ZoomFactor);
	BOOL GetDisplayZoomEx(long* CenterX, long* CenterY, double* ZoomFactor);
	double GetPanoramaZoomFactor();
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_CVDISPLAY_H__DF5A5412_B84B_4682_94C8_452E308D6A07__INCLUDED_)
