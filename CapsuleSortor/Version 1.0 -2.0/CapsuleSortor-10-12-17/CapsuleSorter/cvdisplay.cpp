// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "cvdisplay.h"

/////////////////////////////////////////////////////////////////////////////
// CCVdisplay

IMPLEMENT_DYNCREATE(CCVdisplay, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CCVdisplay properties

long CCVdisplay::GetImage()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetImage(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

double CCVdisplay::GetDisplayGain()
{
	double result;
	GetProperty(0x2, VT_R8, (void*)&result);
	return result;
}

void CCVdisplay::SetDisplayGain(double propVal)
{
	SetProperty(0x2, VT_R8, propVal);
}

long CCVdisplay::GetDisplayOffset()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetDisplayOffset(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CCVdisplay::GetLeftButtonMode()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetLeftButtonMode(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

BOOL CCVdisplay::GetStatusImageSize()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetStatusImageSize(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetStatusEmpty()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetStatusEmpty(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetStatusScale()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetStatusScale(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetStatusCurrentPos()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetStatusCurrentPos(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetStatusGrayValue()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetStatusGrayValue(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetScrollBars()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetScrollBars(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetShowCoords()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetShowCoords(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetDrawErase()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetDrawErase(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

long CCVdisplay::GetGreenPage()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetGreenPage(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

long CCVdisplay::GetRedPage()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetRedPage(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CCVdisplay::GetBluePage()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetBluePage(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

BOOL CCVdisplay::GetBevelInner()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetBevelInner(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetBevelOuter()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetBevelOuter(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

long CCVdisplay::GetCoordStyle()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetCoordStyle(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

short CCVdisplay::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I4, propVal);
}

short CCVdisplay::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CCVdisplay::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

BOOL CCVdisplay::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

OLE_HANDLE CCVdisplay::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

CString CCVdisplay::GetStatusUserText()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CCVdisplay::SetStatusUserText(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

BOOL CCVdisplay::GetRulerEnabled()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetRulerEnabled(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetDirectDrawEnabled()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetDirectDrawEnabled(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

long CCVdisplay::GetAOOCount()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

CString CCVdisplay::GetAOOName()
{
	CString result;
	GetProperty(0x17, VT_BSTR, (void*)&result);
	return result;
}

long CCVdisplay::GetAOOType()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

long CCVdisplay::GetAOONumVertices()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

long CCVdisplay::GetAOONumVerticesUsed()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

long CCVdisplay::GetAOOIndex()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetAOOIndex(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

long CCVdisplay::GetRightButtonMode()
{
	long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetRightButtonMode(long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

BOOL CCVdisplay::GetManualDisplayRefresh()
{
	BOOL result;
	GetProperty(0x41, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetManualDisplayRefresh(BOOL propVal)
{
	SetProperty(0x41, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetOverlayDragAndDelete()
{
	BOOL result;
	GetProperty(0x42, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetOverlayDragAndDelete(BOOL propVal)
{
	SetProperty(0x42, VT_BOOL, propVal);
}

BOOL CCVdisplay::GetSyncRefreshToMonitor()
{
	BOOL result;
	GetProperty(0x43, VT_BOOL, (void*)&result);
	return result;
}

void CCVdisplay::SetSyncRefreshToMonitor(BOOL propVal)
{
	SetProperty(0x43, VT_BOOL, propVal);
}

long CCVdisplay::GetMouseWheelMode()
{
	long result;
	GetProperty(0x44, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetMouseWheelMode(long propVal)
{
	SetProperty(0x44, VT_I4, propVal);
}

long CCVdisplay::GetDisplayRectPercentage()
{
	long result;
	GetProperty(0x45, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetDisplayRectPercentage(long propVal)
{
	SetProperty(0x45, VT_I4, propVal);
}

OLE_COLOR CCVdisplay::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CCVdisplay::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CCVdisplay operations

BOOL CCVdisplay::SaveImageByDialog()
{
	BOOL result;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::SaveImage(LPCTSTR Filename)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Filename);
	return result;
}

BOOL CCVdisplay::CopyImageToClipboard()
{
	BOOL result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::GetSelectedArea(double* x0, double* y0, double* x1, double* y1, double* x2, double* y2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		x0, y0, x1, y1, x2, y2);
	return result;
}

BOOL CCVdisplay::SetSelectedArea(double x0, double y0, double x1, double y1, double x2, double y2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		x0, y0, x1, y1, x2, y2);
	return result;
}

BOOL CCVdisplay::RemoveLabel(long ID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID);
	return result;
}

BOOL CCVdisplay::RemoveAllLabels()
{
	BOOL result;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::SubAreaSelected()
{
	BOOL result;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::MakeOverlayImage()
{
	BOOL result;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::HighLightLabel(long ID, BOOL Highlight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, Highlight);
	return result;
}

BOOL CCVdisplay::GetLabelPosition(long ID, long* x, long* y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, x, y);
	return result;
}

BOOL CCVdisplay::AddLabel(LPCTSTR Text, BOOL CanDrag, long Color, long ID, long x, long y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Text, CanDrag, Color, ID, x, y);
	return result;
}

void CCVdisplay::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CCVdisplay::RemoveUserObject(long ID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID);
	return result;
}

BOOL CCVdisplay::RemoveAllUserObjects()
{
	BOOL result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::GetUserObjectPosition(long ID, long Index, long* x, long* y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, Index, x, y);
	return result;
}

BOOL CCVdisplay::ImageToClient(long ImageX, long ImageY, long* ClientX, long* ClientY)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ImageX, ImageY, ClientX, ClientY);
	return result;
}

BOOL CCVdisplay::ClientToImage(long ClientX, long ClientY, long* ImageX, long* ImageY)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ClientX, ClientY, ImageX, ImageY);
	return result;
}

BOOL CCVdisplay::AddUserObject(LPCTSTR Text, BOOL CanDrag, BOOL XorOnly, long NumVertices, long ID, long Vertices)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Text, CanDrag, XorOnly, NumVertices, ID, Vertices);
	return result;
}

BOOL CCVdisplay::RemoveOverlayObject(long ID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID);
	return result;
}

BOOL CCVdisplay::RemoveAllOverlayObjects()
{
	BOOL result;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::GetOverlayObjectPosition(long ID, long Index, long* x, long* y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, Index, x, y);
	return result;
}

BOOL CCVdisplay::HighLightOverlayObject(long ID, BOOL Highlight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, Highlight);
	return result;
}

BOOL CCVdisplay::MoveOverlayObject(long ID, long x, long y, BOOL MoveAbsolute)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID, x, y, MoveAbsolute);
	return result;
}

BOOL CCVdisplay::IsOverlayObjectAvailable(LPCTSTR ObjectName, long* ObjectType, long* NumVertices, long* NumVerticesUsed)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ObjectName, ObjectType, NumVertices, NumVerticesUsed);
	return result;
}

BOOL CCVdisplay::AddOverlayObject(LPCTSTR ObjectName, LPCTSTR Text, BOOL CanDrag, BOOL XorOnly, long Color, long HighLightColor, BOOL Filled, long ID, long* Vertices, long* ObjectData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL VTS_I4 VTS_I4 VTS_BOOL VTS_I4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ObjectName, Text, CanDrag, XorOnly, Color, HighLightColor, Filled, ID, Vertices, ObjectData);
	return result;
}

BOOL CCVdisplay::GetDisplayZoom(long* CenterX, long* CenterY, long* ZoomFactor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CenterX, CenterY, ZoomFactor);
	return result;
}

BOOL CCVdisplay::SetDisplayZoom(long CenterX, long CenterY, long ZoomFactor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CenterX, CenterY, ZoomFactor);
	return result;
}

void CCVdisplay::Lock()
{
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CCVdisplay::Unlock()
{
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CCVdisplay::RemoveAllOverlays()
{
	BOOL result;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CCVdisplay::SaveWindowToBitmap(long hWnd, LPCTSTR Filename)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hWnd, Filename);
	return result;
}

BOOL CCVdisplay::HasLabel(long ID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID);
	return result;
}

BOOL CCVdisplay::HasOverlayObject(long ID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID);
	return result;
}

BOOL CCVdisplay::HasUserObject(long ID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ID);
	return result;
}

BOOL CCVdisplay::AddUserObjectNET(LPCTSTR Text, BOOL CanDrag, BOOL XorOnly, long ID, long PixelList)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL VTS_I4 VTS_I4;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Text, CanDrag, XorOnly, ID, PixelList);
	return result;
}

BOOL CCVdisplay::SetDisplayZoomEx(long CenterX, long CenterY, double ZoomFactor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CenterX, CenterY, ZoomFactor);
	return result;
}

BOOL CCVdisplay::GetDisplayZoomEx(long* CenterX, long* CenterY, double* ZoomFactor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PR8;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CenterX, CenterY, ZoomFactor);
	return result;
}

double CCVdisplay::GetPanoramaZoomFactor()
{
	double result;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
	return result;
}

void CCVdisplay::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
